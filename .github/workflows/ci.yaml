name: CI

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  # Job 1: Build and Push to Docker Hub
  build:
    runs-on: ubuntu-latest
    
    # Step 1: Check out the code from the repository
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    # Step 2: Set up .NET
    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'
    
    # Step 3: Build the .NET projects
    - name: Build ShoppingCartApi Project
      run: dotnet build ShoppingCartApi/ShoppingCartApi.csproj --configuration Release

    - name: Build ShoppingCartWeb Project
      run: dotnet build ShoppingCartWeb/ShoppingCartWeb.csproj --configuration Release

    - name: Build ProductApi Project
      run: dotnet build ProductApi/ProductApi.csproj --configuration Release

    # Step 4: Set up Docker Buildx
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    # Step 5: Log in to Docker Hub
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Step 6: Build and push the ShoppingCartApi Docker image
    - name: Build and push ShoppingCartApi Docker image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/shoppingcartapi:latest -f ShoppingCartApi/Dockerfile .
        docker push ${{ secrets.DOCKER_USERNAME }}/shoppingcartapi:latest

    # Step 7: Build and push the ShoppingCartWeb Docker image
    - name: Build and push ShoppingCartWeb Docker image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/shoppingcartweb:latest -f ShoppingCartWeb/Dockerfile .
        docker push ${{ secrets.DOCKER_USERNAME }}/shoppingcartweb:latest

    # Step 8: Build and push the ProductApi Docker image
    - name: Build and push ProductApi Docker image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/productapi:latest -f ProductApi/Dockerfile .
        docker push ${{ secrets.DOCKER_USERNAME }}/productapi:latest

  snyk:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@master
      - name: Setup .NET
        uses: actions/setup-dotnet@3.0.3
      - name: Restore dependencies
        run: dotnet restore ./path/to/your.sln
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/dotnet@master
        continue-on-error: true # To make sure that SARIF upload gets called
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --sarif-file-output=snyk.sarif
      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk.sarif